{
	"info": {
		"_postman_id": "f9c3ead2-d286-44c8-a499-2a36fcf61213",
		"name": "Projet Web Efrei",
		"description": "Sofiane Fares\n\nJulien Esnault\n\nClément Suire\n\nGalaad Filâtre",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46300404",
		"_collection_link": "https://sofianefares.postman.co/workspace/e649fe57-d047-469c-840c-e02347de9ae9/collection/46300404-f9c3ead2-d286-44c8-a499-2a36fcf61213?action=share&source=collection_link&creator=46300404"
	},
	"item": [
		{
			"name": "REST Endpoints",
			"item": [
				{
					"name": "Hello World",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Endpoint principal qui retourne 'Hello World!'"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains Hello World\", function () {",
									"    pm.expect(pm.response.text()).to.include('Hello World');",
									"});"
								]
							}
						}
					],
					"response": []
				},
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Vérifie la santé de l'application et ajoute un job à la queue Redis"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains OK status\", function () {",
									"    pm.expect(pm.response.text()).to.include('OK');",
									"});"
								]
							}
						}
					],
					"response": []
				}
			],
			"description": "Endpoints REST de l'API"
		},
		{
			"name": "GraphQL - Queries",
			"item": [
				{
					"name": "Ping Test",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { result }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Test de base GraphQL - retourne 'ok'"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"GraphQL response structure is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								]
							}
						}
					],
					"response": []
				},
				{
					"name": "Tous les utilisateurs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { users { id email username role createdAt updatedAt } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Récupère tous les utilisateurs"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Users query returns data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('users');",
									"});"
								]
							}
						}
					],
					"response": []
				},
				{
					"name": "Utilisateur par ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query($id: String!) { user(id: $id) { id email username role createdAt updatedAt } }\",\n  \"variables\": {\n    \"id\": \"1\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Récupère un utilisateur spécifique par son ID"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User query returns data or null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"});"
								]
							}
						}
					],
					"response": []
				},
				{
					"name": "Tous les documents",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { documents { id title description fileUrl userId createdAt updatedAt } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Récupère tous les documents"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Documents query returns data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('documents');",
									"});"
								]
							}
						}
					],
					"response": []
				},
				{
					"name": "Documents d'un utilisateur",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query($userId: String!) { getDocumentsByUser(userId: $userId) { id title description fileUrl userId createdAt updatedAt } }\",\n  \"variables\": {\n    \"userId\": \"1\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Récupère tous les documents d'un utilisateur spécifique"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User documents query returns data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('getDocumentsByUser');",
									"});"
								]
							}
						}
					],
					"response": []
				},
				{
					"name": "Document par ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query($id: String!) { getDocumentById(id: $id) { id title description fileUrl userId createdAt updatedAt } }\",\n  \"variables\": {\n    \"id\": \"1\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Récupère un document spécifique par son ID"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Document query returns data or null\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('getDocumentById');",
									"});"
								]
							}
						}
					],
					"response": []
				}
			],
			"description": "Queries GraphQL pour la lecture de données"
		},
		{
			"name": "GraphQL - Mutations",
			"item": [
				{
					"name": "Créer un utilisateur",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation($input: CreateUserInput!) { createUser(createUserInput: $input) { id email username role createdAt updatedAt } }\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"test-newman@example.com\",\n      \"username\": \"testuser-newman\",\n      \"role\": \"USER\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Crée un nouvel utilisateur"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User creation successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    if (jsonData.data && jsonData.data.createUser) {",
									"        pm.expect(jsonData.data.createUser).to.have.property('id');",
									"        pm.expect(jsonData.data.createUser).to.have.property('email');",
									"        pm.expect(jsonData.data.createUser.email).to.eql('test-newman@example.com');",
									"        // Store user ID for cleanup",
									"        pm.environment.set('lastCreatedUserId', jsonData.data.createUser.id);",
									"    }",
									"});"
								]
							}
						}
					],
					"response": []
				},
				{
					"name": "Créer un document",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation($input: CreateDocumentInput!) { createDocument(createDocumentInput: $input) { id title description fileUrl userId createdAt updatedAt } }\",\n  \"variables\": {\n    \"input\": {\n      \"title\": \"Document Test Newman\",\n      \"description\": \"Document créé lors des tests Newman\",\n      \"fileUrl\": \"https://example.com/test-newman.pdf\",\n      \"userId\": \"{{lastCreatedUserId}}\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Crée un nouveau document avec URL de fichier"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Remplace la variable dans le body avec la valeur de l'environnement",
									"let body = pm.request.body.raw;",
									"let userId = pm.environment.get('lastCreatedUserId') || '1';",
									"body = body.replace('{{lastCreatedUserId}}', userId);",
									"pm.request.body.raw = body;"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Document creation successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    if (jsonData.data && jsonData.data.createDocument) {",
									"        pm.expect(jsonData.data.createDocument).to.have.property('id');",
									"        pm.expect(jsonData.data.createDocument).to.have.property('title');",
									"        pm.expect(jsonData.data.createDocument.title).to.eql('Document Test Newman');",
									"        // Store document ID for cleanup",
									"        pm.environment.set('lastCreatedDocumentId', jsonData.data.createDocument.id);",
									"    }",
									"});"
								]
							}
						}
					],
					"response": []
				}
			],
			"description": "Mutations GraphQL pour la création, modification et suppression de données"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
} 